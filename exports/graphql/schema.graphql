input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Global {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  favicon: UploadFile
  siteName: String!
  defaultSeo: ComponentSharedSeo
}

input GlobalInput {
  favicon: ID
  siteName: String!
  defaultSeo: ComponentSharedSeoInput!
  created_by: ID
  updated_by: ID
}

input editGlobalInput {
  favicon: ID
  siteName: String
  defaultSeo: editComponentSharedSeoInput
  created_by: ID
  updated_by: ID
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

type deleteGlobalPayload {
  global: Global
}

type Homepage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  seo: ComponentSharedSeo
  hero: ComponentSectionsHero
}

input HomepageInput {
  seo: ComponentSharedSeoInput
  hero: ComponentSectionsHeroInput
  created_by: ID
  updated_by: ID
}

input editHomepageInput {
  seo: editComponentSharedSeoInput
  hero: editComponentSectionsHeroInput
  created_by: ID
  updated_by: ID
}

input updateHomepageInput {
  data: editHomepageInput
}

type updateHomepagePayload {
  homepage: Homepage
}

type deleteHomepagePayload {
  homepage: Homepage
}

type Positions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  comment: String
  image: UploadFile
  prompt: String!
}

type PositionsConnection {
  values: [Positions]
  groupBy: PositionsGroupBy
  aggregate: PositionsAggregator
}

type PositionsAggregator {
  count: Int
  totalCount: Int
}

type PositionsGroupBy {
  id: [PositionsConnectionId]
  created_at: [PositionsConnectionCreated_at]
  updated_at: [PositionsConnectionUpdated_at]
  name: [PositionsConnectionName]
  comment: [PositionsConnectionComment]
  image: [PositionsConnectionImage]
  prompt: [PositionsConnectionPrompt]
}

type PositionsConnectionId {
  key: ID
  connection: PositionsConnection
}

type PositionsConnectionCreated_at {
  key: DateTime
  connection: PositionsConnection
}

type PositionsConnectionUpdated_at {
  key: DateTime
  connection: PositionsConnection
}

type PositionsConnectionName {
  key: String
  connection: PositionsConnection
}

type PositionsConnectionComment {
  key: String
  connection: PositionsConnection
}

type PositionsConnectionImage {
  key: ID
  connection: PositionsConnection
}

type PositionsConnectionPrompt {
  key: String
  connection: PositionsConnection
}

input PositionInput {
  name: String!
  comment: String
  image: ID
  prompt: String!
  created_by: ID
  updated_by: ID
}

input editPositionInput {
  name: String
  comment: String
  image: ID
  prompt: String
  created_by: ID
  updated_by: ID
}

input createPositionInput {
  data: PositionInput
}

type createPositionPayload {
  position: Positions
}

input updatePositionInput {
  where: InputID
  data: editPositionInput
}

type updatePositionPayload {
  position: Positions
}

input deletePositionInput {
  where: InputID
}

type deletePositionPayload {
  position: Positions
}

type Readings {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  slug: String!
  date: DateTime
  image: UploadFile
  author: UsersPermissionsUser
  spread: Spreads
  comment: String
}

type ReadingsConnection {
  values: [Readings]
  groupBy: ReadingsGroupBy
  aggregate: ReadingsAggregator
}

type ReadingsAggregator {
  count: Int
  totalCount: Int
}

type ReadingsGroupBy {
  id: [ReadingsConnectionId]
  created_at: [ReadingsConnectionCreated_at]
  updated_at: [ReadingsConnectionUpdated_at]
  title: [ReadingsConnectionTitle]
  slug: [ReadingsConnectionSlug]
  date: [ReadingsConnectionDate]
  image: [ReadingsConnectionImage]
  author: [ReadingsConnectionAuthor]
  spread: [ReadingsConnectionSpread]
  comment: [ReadingsConnectionComment]
}

type ReadingsConnectionId {
  key: ID
  connection: ReadingsConnection
}

type ReadingsConnectionCreated_at {
  key: DateTime
  connection: ReadingsConnection
}

type ReadingsConnectionUpdated_at {
  key: DateTime
  connection: ReadingsConnection
}

type ReadingsConnectionTitle {
  key: String
  connection: ReadingsConnection
}

type ReadingsConnectionSlug {
  key: String
  connection: ReadingsConnection
}

type ReadingsConnectionDate {
  key: DateTime
  connection: ReadingsConnection
}

type ReadingsConnectionImage {
  key: ID
  connection: ReadingsConnection
}

type ReadingsConnectionAuthor {
  key: ID
  connection: ReadingsConnection
}

type ReadingsConnectionSpread {
  key: ID
  connection: ReadingsConnection
}

type ReadingsConnectionComment {
  key: String
  connection: ReadingsConnection
}

input ReadingInput {
  title: String!
  slug: String!
  date: DateTime
  image: ID
  author: ID
  spread: ID
  comment: String
  created_by: ID
  updated_by: ID
}

input editReadingInput {
  title: String
  slug: String
  date: DateTime
  image: ID
  author: ID
  spread: ID
  comment: String
  created_by: ID
  updated_by: ID
}

input createReadingInput {
  data: ReadingInput
}

type createReadingPayload {
  reading: Readings
}

input updateReadingInput {
  where: InputID
  data: editReadingInput
}

type updateReadingPayload {
  reading: Readings
}

input deleteReadingInput {
  where: InputID
}

type deleteReadingPayload {
  reading: Readings
}

type Spreads {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  type: String!
  comment: String
  image: UploadFile
  positions(sort: String, limit: Int, start: Int, where: JSON): [Positions]
}

type SpreadsConnection {
  values: [Spreads]
  groupBy: SpreadsGroupBy
  aggregate: SpreadsAggregator
}

type SpreadsAggregator {
  count: Int
  totalCount: Int
}

type SpreadsGroupBy {
  id: [SpreadsConnectionId]
  created_at: [SpreadsConnectionCreated_at]
  updated_at: [SpreadsConnectionUpdated_at]
  type: [SpreadsConnectionType]
  comment: [SpreadsConnectionComment]
  image: [SpreadsConnectionImage]
}

type SpreadsConnectionId {
  key: ID
  connection: SpreadsConnection
}

type SpreadsConnectionCreated_at {
  key: DateTime
  connection: SpreadsConnection
}

type SpreadsConnectionUpdated_at {
  key: DateTime
  connection: SpreadsConnection
}

type SpreadsConnectionType {
  key: String
  connection: SpreadsConnection
}

type SpreadsConnectionComment {
  key: String
  connection: SpreadsConnection
}

type SpreadsConnectionImage {
  key: ID
  connection: SpreadsConnection
}

input SpreadInput {
  type: String!
  comment: String
  image: ID
  positions: [ID]
  created_by: ID
  updated_by: ID
}

input editSpreadInput {
  type: String
  comment: String
  image: ID
  positions: [ID]
  created_by: ID
  updated_by: ID
}

input createSpreadInput {
  data: SpreadInput
}

type createSpreadPayload {
  spread: Spreads
}

input updateSpreadInput {
  where: InputID
  data: editSpreadInput
}

type updateSpreadPayload {
  spread: Spreads
}

input deleteSpreadInput {
  where: InputID
}

type deleteSpreadPayload {
  spread: Spreads
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  image: UploadFile
  readings(sort: String, limit: Int, start: Int, where: JSON): [Readings]
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  image: [UsersPermissionsUserConnectionImage]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionImage {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  readings: [ID]
  image: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  readings: [ID]
  image: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentSectionsHero {
  id: ID!
  title: String!
}

input ComponentSectionsHeroInput {
  title: String!
}

input editComponentSectionsHeroInput {
  id: ID
  title: String
}

type ComponentSharedSeo {
  id: ID!
  metaTitle: String!
  metaDescription: String!
  shareImage: UploadFile
}

input ComponentSharedSeoInput {
  metaTitle: String!
  metaDescription: String!
  shareImage: ID
}

input editComponentSharedSeoInput {
  id: ID
  metaTitle: String
  metaDescription: String
  shareImage: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Global | updateGlobalPayload | deleteGlobalPayload | Homepage | updateHomepagePayload | deleteHomepagePayload | Positions | PositionsConnection | PositionsAggregator | PositionsGroupBy | PositionsConnectionId | PositionsConnectionCreated_at | PositionsConnectionUpdated_at | PositionsConnectionName | PositionsConnectionComment | PositionsConnectionImage | PositionsConnectionPrompt | createPositionPayload | updatePositionPayload | deletePositionPayload | Readings | ReadingsConnection | ReadingsAggregator | ReadingsGroupBy | ReadingsConnectionId | ReadingsConnectionCreated_at | ReadingsConnectionUpdated_at | ReadingsConnectionTitle | ReadingsConnectionSlug | ReadingsConnectionDate | ReadingsConnectionImage | ReadingsConnectionAuthor | ReadingsConnectionSpread | ReadingsConnectionComment | createReadingPayload | updateReadingPayload | deleteReadingPayload | Spreads | SpreadsConnection | SpreadsAggregator | SpreadsGroupBy | SpreadsConnectionId | SpreadsConnectionCreated_at | SpreadsConnectionUpdated_at | SpreadsConnectionType | SpreadsConnectionComment | SpreadsConnectionImage | createSpreadPayload | updateSpreadPayload | deleteSpreadPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionImage | createUserPayload | updateUserPayload | deleteUserPayload | ComponentSectionsHero | ComponentSharedSeo

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  global(publicationState: PublicationState): Global
  homepage(publicationState: PublicationState): Homepage
  position(id: ID!, publicationState: PublicationState): Positions
  positions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Positions]
  positionsConnection(sort: String, limit: Int, start: Int, where: JSON): PositionsConnection
  reading(id: ID!, publicationState: PublicationState): Readings
  readings(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Readings]
  readingsConnection(sort: String, limit: Int, start: Int, where: JSON): ReadingsConnection
  spread(id: ID!, publicationState: PublicationState): Spreads
  spreads(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Spreads]
  spreadsConnection(sort: String, limit: Int, start: Int, where: JSON): SpreadsConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  deleteHomepage: deleteHomepagePayload
  createPosition(input: createPositionInput): createPositionPayload
  updatePosition(input: updatePositionInput): updatePositionPayload
  deletePosition(input: deletePositionInput): deletePositionPayload
  createReading(input: createReadingInput): createReadingPayload
  updateReading(input: updateReadingInput): updateReadingPayload
  deleteReading(input: deleteReadingInput): deleteReadingPayload
  createSpread(input: createSpreadInput): createSpreadPayload
  updateSpread(input: updateSpreadInput): updateSpreadPayload
  deleteSpread(input: deleteSpreadInput): deleteSpreadPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
